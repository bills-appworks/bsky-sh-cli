#!/bin/sh
# Bluesky in the shell
# A Bluesky CLI (Command Line Interface) implementation in shell script
# Author Bluesky:@billsbs.bills-appworks.net
# 
# Copyright (c) 2024 bills-appworks
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php
FILE_DIR=`dirname "$0"`
FILE_DIR=`(cd "${FILE_DIR}" && pwd)`

# following definitions are same to lib/api/common.sh
# for indipendence of this bsky command

# global option (default value)
BSKYSHCLI_GLOBAL_OPTION_PROFILE=''

# $<variables> want to pass through for jq
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_ID='[uri:\($URI)] [cid:\($CID)]'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_META='[ViewIndex:\($VIEW_INDEX)] VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_HEAD='\($AUTHOR_DISPLAYNAME) @\($AUTHOR_HANDLE) \($CREATED_AT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_BODY='\($TEXT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_TAIL='Reply:\($REPLY_COUNT) Repost:\($REPOST_COUNT) Like:\($LIKE_COUNT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_SEPARATOR=''
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER='VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER'
BSKYSHCLI_VIEW_TEMPLATE_QUOTE='| '

BSKYSHCLI_DEFAULT_RESOURCE_CONFIG_PATH="${HOME}/.bsky_sh_cli_rc"
BSKYSHCLI_DEFAULT_TOOLS_WORK_DIR="${HOME}/.bsky_sh_cli"
BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR="${FILE_DIR}/.."
BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR=`(cd "${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}" && pwd)`
BSKYSHCLI_DEFAULT_LIB_PATH="${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}/lib"

# read resource config
if [ -z "${BSKYSHCLI_RESOURCE_CONFIG_PATH}" ]
then
  BSKYSHCLI_RESOURCE_CONFIG_PATH="${BSKYSHCLI_DEFAULT_RESOURCE_CONFIG_PATH}"
elif [ -r "${BSKYSHCLI_RESOURCE_CONFIG_PATH}" ]
then
  :
else
  echo "specified resource config path (BSKYSHCLI_RESOURCE_CONFIG_PATH) is not readable: ${BSKYSHCLI_RESOURCE_CONFIG_PATH}"
  exit 1
fi
export BSKYSHCLI_RESOURCE_CONFIG_PATH
if [ -r "${BSKYSHCLI_RESOURCE_CONFIG_PATH}" ]
then
  # SC1090 disable for resource config file generize on runtime
  # shellcheck source=/dev/null
  . "${BSKYSHCLI_RESOURCE_CONFIG_PATH}"
fi

if [ -z "${BSKYSHCLI_TOOLS_WORK_DIR}" ]
then
  BSKYSHCLI_TOOLS_WORK_DIR="${BSKYSHCLI_DEFAULT_TOOLS_WORK_DIR}"
fi
export BSKYSHCLI_TOOLS_WORK_DIR
if [ -z "${BSKYSHCLI_TOOLS_ROOT_DIR}" ]
then
  BSKYSHCLI_TOOLS_ROOT_DIR="${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}"
fi
export BSKYSHCLI_TOOLS_ROOT_DIR
if [ -z "${BSKYSHCLI_LIB_PATH}" ]
then
  BSKYSHCLI_LIB_PATH="${BSKYSHCLI_DEFAULT_LIB_PATH}"
fi
export BSKYSHCLI_LIB_PATH
if [ -z "${BSKYSHCLI_API_PATH}" ]
then
  BSKYSHCLI_API_PATH="${BSKYSHCLI_LIB_PATH}/api"
fi
export BSKYSHCLI_API_PATH

UTILITY_PATH="${BSKYSHCLI_LIB_PATH}/util.sh"
if [ -r "${UTILITY_PATH}" ]
then
  # SC1090
  # shellcheck source=SCRIPTDIR/../lib/util.sh
  . "${UTILITY_PATH}"
else
  echo "tools internal configured file util.sh is not readable: ${UTILITY_PATH}"
  exit 1
fi
BSKY_CORE_PATH="${BSKYSHCLI_LIB_PATH}/bsky_core.sh"
if [ -r "${BSKY_CORE_PATH}" ]
then
  # SC1090
  # shellcheck source=SCRIPTDIR/../lib/bsky_core.sh
  . "${BSKY_CORE_PATH}"
else
  echo "tools internal configured file bsky_core.sh is not readable: ${BSKY_CORE_PATH}"
  exit 1
fi

# functions

output_help_general()
{
  debug 'output_help_general' 'START'

  cat << 'EOS'
bsky - A Bluesky CLI (Command Line Interface) implementation in shell script
usage: bsky [options] <command> [parameters]

global options:
  -P <profile>, --profile=<profile>
      specify session profile name. sessions coexist independently for each profile.

  --session-refresh
      forces a session refresh on command exectuion.

commands:
  login     login to Bluesky for create session.
  logout    logout from Bluesky for clear session.
  timeline  show timeline (now incomplete).
  post      post text.
  reply     reply to existing post.
  repost    reopst of existing post.
  quote     post by quoting an existing post.
  like      like on existing post.
  thread    show thread of specified post.
  help      show this help.

To see command help:
  bsky <command> help
EOS

  debug 'output_help_general' 'END'
}

output_help_login()
{
  debug 'output_help_login' 'START'

  cat << 'EOS'
bsky login command help'

usage: bsky login --handle <handle> --password <password>

parameters:
  --handle <handle>
    Specify Bluesky handle. Default domain (.bsky.social) can be omitted.
  --password <password>
    Specify the password corresponding to the handle.

note:
  A local file containing login session information is generated.
  Login session information is deleted using the logout command.
EOS

  debug 'output_help_login' 'END'
}

output_help_logout()
{
  debug 'output_help_logout' 'START'

  cat << 'EOS'
bsky logout command help

usage: bsky logout

parameters:
  none

note:
  Delete session and local files containing login session information.
EOS

  debug 'output_help_logout' 'END'
}

output_help_timeline()
{
  debug 'output_help_timeline' 'START'

  cat << 'EOS'
bsky timeline help

usage: bsky timeline [--limit <number>] [--next]
  --limit <number>
    Specify limit number (default 50) of output feeds (from 1 to 100).
  --next
    Output next feeds from previous timeline command.

parameters:
  <under construction>

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_timeline' 'END'
}

output_help_post()
{
  debug 'output_help_post' 'START'

  cat << 'EOS'
bsky post help

usage: bsky post --text '<text>'

parameters:
  --text '<text>'
    Specify text for post.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_post' 'END'
}

output_help_reply()
{
  debug 'output_help_reply' 'START'

  cat << 'EOS'
bsky reply help

usage: bsky reply --index <view index> --text '<text>'
       or
       bsky reply --uri <uri> --cid <cid> --text '<text>'

parameters:
  --index <index>
    Specify the index number pointing to the feed to be replied to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be replied to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --text '<text>'
    Specify text for post.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_reply' 'END'
}

output_help_repost()
{
  debug 'output_help_repost' 'START'

  cat << 'EOS'
bsky repost help

usage: bsky repost --index <view index>
       or
       bsky repost --uri <uri> --cid <cid>

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be reposted to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be reposted to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_repost' 'END'
}

output_help_quote()
{
  debug 'output_help_quote' 'START'

  cat << 'EOS'
bsky quote help

usage: bsky quote --index <view index> --text '<text>'
       or
       bsky quote --uri <uri> --cid <cid> --text '<text>'

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be quoted to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be quoted to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --text '<text>'
    Specify text for post.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_quote' 'END'
}

output_help_like()
{
  debug 'output_help_like' 'START'

  cat << 'EOS'
bsky like help

usage: bsky like --index <view index>
       or
       bsky like --uri <uri> --cid <cid>

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be liked to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be liked to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_like' 'END'
}

output_help_thread()
{
  debug 'output_help_thread' 'START'

  cat << 'EOS'
bsky thread help

usage: bsky thread --index <view index>
       or
       bsky thread --uri <uri>

parameters:
  --index <view index>
    Specify the index string pointing to the feed to be show thread to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
    Specify the AT URI pointing to the feed to be show thread to.
    The AT URI will be output by specifying the "--output-id" option with te feed output command.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_thread' 'END'
}

parse_parameters_login()
{
  debug 'parse_parameters_login' 'START'

  # parameter may include a password
  debug_mode_suppress
  parse_parameters '--handle:1 --password:1' "$@"
  OPTIONS=$?
  debug_mode_restore

  # dynamic assignment in parse_parameters
  # shellcheck disable=SC2154
  PARAM_HANDLE="${PARSED_PARAM_KEYVALUE_handle}"
  # dynamic assignment in parse_parameters
  # shellcheck disable=SC2154
  PARAM_PASSWORD="${PARSED_PARAM_KEYVALUE_password}"

  debug 'parse_parameters_login' 'END'
}

parse_global_option()
{
  debug 'parse_global_option' 'START'

  # if the subsequent command is 'login', parameter may include a password
  debug_mode_suppress
  parse_parameters '-P:1 --profile:1 --session-refresh:0' "$@"
  OPTIONS=$?
  debug_mode_restore
  
  if [ -n "${PARSED_PARAM_KEYVALUE_P}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_PROFILE="${PARSED_PARAM_KEYVALUE_P}"
  elif [ -n "${PARSED_PARAM_KEYVALUE_profile}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_PROFILE="${PARSED_PARAM_KEYVALUE_profile}"
  fi

  if [ -n "${BSKYSHCLI_GLOBAL_OPTION_PROFILE}" ]
  then
    # to pass the value to the API script executing the command at api_core()
    export BSKYSHCLI_GLOBAL_OPTION_PROFILE
    verify_profile_name "${BSKYSHCLI_GLOBAL_OPTION_PROFILE}"
  fi

  if [ -n "${PARSED_PARAM_KEYONLY_session_refresh}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_SESSION_REFRESH='defined'
  fi

  debug 'parse_global_option' 'END'

  return "${OPTIONS}"
}

command_login()
{
  debug 'command_login' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_login
  else
    parse_parameters_login "$@"
    if [ -z "${PARAM_HANDLE}" ]
    then
      error 'Handle not specified.'
    fi

    if [ -z "${PARAM_PASSWORD}" ]
    then
      error 'Password not specified.'
    fi

    HANDLE_CHECK=`_p "${PARAM_HANDLE}" | sed 's/[^.]//g'`
    if [ -z "${HANDLE_CHECK}" ]
    then
      PARAM_HANDLE="${PARAM_HANDLE}${BSKYSHCLI_DEFAULT_DOMAIN}"
    fi

    core_create_session "${PARAM_HANDLE}" "${PARAM_PASSWORD}"
    read_session_file
    _pn "login session of ${SESSION_HANDLE}"
  fi

  debug 'command_login' 'END'

  return 0
}

command_logout()
{
  debug 'command_logout' 'START'

  read_session_file
  if [ -n "${SESSION_HANDLE}" ]
  then
    core_delete_session
    _pn "logout session of ${SESSION_HANDLE}"
  else
    error 'session not found'
  fi

  debug 'command_logout' 'END'

  return 0
}

command_timeline()
{
  debug 'command_timeline' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_timeline
  else
    parse_parameters '--limit:1 --next:0 --output-id:0' "$@"
    if [ -n "${PARSED_PARAM_KEYVALUE_limit}" ]
    then
      _isnumeric "${PARSED_PARAM_KEYVALUE_limit}"
      IS_NUMERIC=$?
      if [ $IS_NUMERIC -ne 0 ]
      then
        error "limit parameter must be numeric value: ${PARSED_PARAM_KEYVALUE_limit}"
      fi
      LIMIT="${PARSED_PARAM_KEYVALUE_limit}"
      if [ "${LIMIT}" -lt 1 ] || [ "${LIMIT}" -gt 100 ]
      then
        error "limit parameter must be specify from 1 to 100: ${PARSED_PARAM_KEYVALUE_limit}"
      fi
    else
      LIMIT=''
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_get_timeline '' "${LIMIT}" "${PARSED_PARAM_KEYONLY_next}" "${PARSED_PARAM_KEYONLY_output_id}"
  fi

  debug 'command_timeline' 'END'

  return 0
}

command_post()
{
  debug 'command_post' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_post
  else
    parse_parameters '--text:1' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    POST_TEXT="${PARSED_PARAM_KEYVALUE_text}"
    if [ -z "${POST_TEXT}" ]
    then
      error "parameter --text '<text>' not specified"
    fi
    core_post "${POST_TEXT}"
  fi

  debug 'command_post' 'END'
}

command_reply()
{
  debug 'command_reply' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_reply
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --text:1' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    VIEW_INDEX="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    URI="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    CID="${PARSED_PARAM_KEYVALUE_cid}"
    POST_TEXT="${PARSED_PARAM_KEYVALUE_text}"
    if [ -n "${VIEW_INDEX}" ]
    then
      if [ -n "${URI}" ] || [ -n "${CID}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${VIEW_INDEX}"
      URI="${FEED_VIEW_INDEX_ELEMENT_URI}"
      CID="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${URI}" ] || [ -z "${CID}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    if [ -z "${POST_TEXT}" ]
    then
      error "parameter --text '<text>' not specified"
    fi
    core_reply "${URI}" "${CID}" "${POST_TEXT}"
  fi

  debug 'command_reply' 'END'
}

command_repost()
{
  debug 'command_repost' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_repost
  else
    parse_parameters '--index:1 --uri:1 --cid:1' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    VIEW_INDEX="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    URI="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    CID="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${VIEW_INDEX}" ]
    then
      if [ -n "${URI}" ] || [ -n "${CID}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${VIEW_INDEX}"
      URI="${FEED_VIEW_INDEX_ELEMENT_URI}"
      CID="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${URI}" ] || [ -z "${CID}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    core_repost "${URI}" "${CID}"
  fi

  debug 'command_repost' 'END'
}

command_quote()
{
  debug 'command_quote' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_quote
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --text:1' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    VIEW_INDEX="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    URI="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    CID="${PARSED_PARAM_KEYVALUE_cid}"
    POST_TEXT="${PARSED_PARAM_KEYVALUE_text}"
    if [ -n "${VIEW_INDEX}" ]
    then
      if [ -n "${URI}" ] || [ -n "${CID}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${VIEW_INDEX}"
      URI="${FEED_VIEW_INDEX_ELEMENT_URI}"
      CID="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${URI}" ] || [ -z "${CID}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    if [ -z "${POST_TEXT}" ]
    then
      error "parameter --text '<text>' not specified"
    fi
    core_quote "${URI}" "${CID}" "${POST_TEXT}"
  fi

  debug 'command_quote' 'END'
}

command_like()
{
  debug 'command_like' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_like
  else
    parse_parameters '--index:1 --uri:1 --cid:1' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    VIEW_INDEX="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    URI="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    CID="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${VIEW_INDEX}" ]
    then
      if [ -n "${URI}" ] || [ -n "${CID}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${VIEW_INDEX}"
      URI="${FEED_VIEW_INDEX_ELEMENT_URI}"
      CID="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${URI}" ] || [ -z "${CID}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    core_like "${URI}" "${CID}"
  fi

  debug 'command_like' 'END'
}

command_thread()
{
  debug 'command_thread' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_thread
  else
    parse_parameters '--index:1 --uri:1 --depth:1 --parent-height:1 --output-id:0' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    VIEW_INDEX="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    URI="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    DEPTH="${PARSED_PARAM_KEYVALUE_depth}"
    # shellcheck disable=SC2154
    PARENT_HEIGHT="${PARSED_PARAM_KEYVALUE_parent_height}"
    if [ -n "${VIEW_INDEX}" ]
    then
      if [ -n "${URI}" ]
      then
        error "--index and --uri are exclusive"
      fi
      core_get_feed_view_index "${VIEW_INDEX}"
      URI="${FEED_VIEW_INDEX_ELEMENT_URI}"
    else
      if [ -z "${URI}" ]
      then
        error "parameter must be specify --index or --uri"
      fi
    fi
    if [ -n "${DEPTH}" ]
    then
      _isnumeric "${DEPTH}"
      IS_NUMERIC=$?
      if [ $IS_NUMERIC -ne 0 ]
      then
        error "--depth parameter must be numeric value: ${DEPTH}"
      fi
    fi
    if [ -n "${PARENT_HEIGHT}" ]
    then
      _isnumeric "${PARENT_HEIGHT}"
      IS_NUMERIC=$?
      if [ $IS_NUMERIC -ne 0 ]
      then
        error "--parent-height parameter must be numeric value: ${PARENT_HEIGHT}"
      fi
    fi
    core_thread "${URI}" "${DEPTH}" "${PARENT_HEIGHT}" "${PARSED_PARAM_KEYONLY_output_id}"
  fi

  debug 'command_thread' 'END'
}

# entry point

set_timezone

debug 'bsky' 'START'
# CAUTION: command parameters may contain sensitive information such as passwords 
#debug 'bsky' "command parameters: $*"

# equal to if ! mkdir...; does not written for compatible with Solaris sh
mkdir -p "${BSKYSHCLI_TOOLS_WORK_DIR}"
RESULT=$?
if [ $RESULT -ne 0 ]
then
  error "cannot make work directory '${BSKYSHCLI_TOOLS_WORK_DIR}'"
fi

parse_global_option "$@"
OPTIONS=$?
for _ in `seq 1 ${OPTIONS}`
do
  shift
done

case $1 in
  login)
    shift
    command_login "$@"
    ;;
  logout)
    shift
    command_logout "$@"
    ;;
  timeline)
    shift
    command_timeline "$@"
    ;;
  post)
    shift
    command_post "$@"
    ;;
  reply)
    shift
    command_reply "$@"
    ;;
  repost)
    shift
    command_repost "$@"
    ;;
  quote)
    shift
    command_quote "$@"
    ;;
  like)
    shift
    command_like "$@"
    ;;
  thread)
    shift
    command_thread "$@"
    ;;
  help)
    output_help_general
    ;;
  *)
    output_help_general
    ;;
esac

debug 'bsky' 'END'

exit 0

