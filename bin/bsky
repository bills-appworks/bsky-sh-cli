#!/bin/sh
# Bluesky in the shell
# A Bluesky CLI (Command Line Interface) implementation in shell script
# Author Bluesky:@billsbs.bills-appworks.net
# 
# Copyright (c) 2024 bills-appworks
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php
FILE_DIR=`dirname "$0"`
FILE_DIR=`(cd "${FILE_DIR}" && pwd)`

BSKYSHCLI_CLI_VERSION='0.6.0'

# following definitions are same to lib/api/common.sh
# for independence of this bsky command

# global option (default value)
BSKYSHCLI_POST_DEFAULT_LANGUAGES=''
BSKYSHCLI_POST_VIA='ON'
BSKYSHCLI_PATH_DELIMITER=':'
BSKYSHCLI_GLOBAL_OPTION_PROFILE=''

# $<variables> want to pass through for jq
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_ID=' [uri:\($URI)] [cid:\($CID)]'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_VIA=' [via:\($VIA)]'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_META='[ViewIndex:\($VIEW_INDEX)]<VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER><VIEW_TEMPLATE_POST_OUTPUT_VIA_PLACEHOLDER>'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_HEAD='\($AUTHOR_DISPLAYNAME)  @\($AUTHOR_HANDLE)  \($CREATED_AT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_BODY='\($TEXT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_TAIL='Reply:\($REPLY_COUNT) Repost:\($REPOST_COUNT) Like:\($LIKE_COUNT)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_SEPARATOR=''
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER='<VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER>'
BSKYSHCLI_VIEW_TEMPLATE_POST_OUTPUT_VIA_PLACEHOLDER='<VIEW_TEMPLATE_POST_OUTPUT_VIA_PLACEHOLDER>'
BSKYSHCLI_VIEW_TEMPLATE_QUOTE='| '
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_FEED_GENERATOR_OUTPUT_ID='[uri:\($URI)] [cid:\($CID)] [did:\($DID)]'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_FEED_GENERATOR_META='[custom feed (feed generator)] VIEW_TEMPLATE_POST_OUTPUT_ID_PLACEHOLDER'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_FEED_GENERATOR_HEAD='\($DISPLAYNAME)\n  Feed by @\($CREATOR_HANDLE)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_FEED_GENERATOR_TAIL='Liked by \($LIKECOUNT) users'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_EXTERNAL_META='[link card]'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_EXTERNAL_HEAD='\($EXTERNAL_URI)\n\($EXTERNAL_TITLE)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_POST_EXTERNAL_BODY='\($EXTERNAL_DESCRIPTION)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_IMAGE=' [image-\($IMAGE_INDEX)] \($ALT)  \($FULLSIZE)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_LINK=' [link-\($LINK_INDEX)] \($URI)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_PROFILE='[avatar] \($AVATAR)\n[banner] \($BANNER)\n\($DISPLAYNAME)\n@\($HANDLE)\n\($FOLLOWERSCOUNT) followers  \($FOLLOWSCOUNT) follows  \($POSTSCOUNT) posts\n\($DESCRIPTION)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_PROFILE_OUTPUT_ID='[avatar] \($AVATAR)\n[banner] \($BANNER)\n\($DISPLAYNAME)\n@\($HANDLE) (\($DID))\n\($FOLLOWERSCOUNT) followers  \($FOLLOWSCOUNT) follows  \($POSTSCOUNT) posts\n\($DESCRIPTION)'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_PROFILE_NAVI_COMMON='[posts]\n bsky author-feed --handle \($HANDLE) --filter posts-no-replies\n[replies]\n bsky author-feed --handle \($HANDLE) --filter posts-with-replies\n[media]\n bsky author-feed --handle \($HANDLE) --filter posts-with-media'
# shellcheck disable=SC2016
BSKYSHCLI_VIEW_TEMPLATE_PROFILE_NAVI_MYACCOUNT='[like]\n (not yet implemented)\n[feed]\n (not yet implemented)\n[list]\n (not yet implemented)'

BSKYSHCLI_DEFAULT_RUN_COMMANDS_PATH="${HOME}/.bsky_sh_cli_rc"
BSKYSHCLI_DEFAULT_TOOLS_WORK_DIR="${HOME}/.bsky_sh_cli"
BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR="${FILE_DIR}/.."
BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR=`(cd "${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}" && pwd)`
BSKYSHCLI_DEFAULT_LIB_PATH="${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}/lib"
BSKYSHCLI_DEFAULT_DEBUG_DIR="${BSKYSHCLI_DEFAULT_TOOLS_WORK_DIR}/debug"

# read Run Commands
if [ -z "${BSKYSHCLI_RUN_COMMANDS_PATH}" ]
then
  BSKYSHCLI_RUN_COMMANDS_PATH="${BSKYSHCLI_DEFAULT_RUN_COMMANDS_PATH}"
fi
export BSKYSHCLI_RUN_COMMANDS_PATH
if [ -r "${BSKYSHCLI_RUN_COMMANDS_PATH}" ]
then
  # SC1090 disable for Run Commands file generize on runtime
  # shellcheck source=/dev/null
  . "${BSKYSHCLI_RUN_COMMANDS_PATH}"
fi

if [ -z "${BSKYSHCLI_TOOLS_WORK_DIR}" ]
then
  BSKYSHCLI_TOOLS_WORK_DIR="${BSKYSHCLI_DEFAULT_TOOLS_WORK_DIR}"
fi
export BSKYSHCLI_TOOLS_WORK_DIR
if [ -z "${BSKYSHCLI_TOOLS_ROOT_DIR}" ]
then
  BSKYSHCLI_TOOLS_ROOT_DIR="${BSKYSHCLI_DEFAULT_TOOLS_ROOT_DIR}"
fi
export BSKYSHCLI_TOOLS_ROOT_DIR
if [ -z "${BSKYSHCLI_LIB_PATH}" ]
then
  BSKYSHCLI_LIB_PATH="${BSKYSHCLI_DEFAULT_LIB_PATH}"
fi
export BSKYSHCLI_LIB_PATH
if [ -z "${BSKYSHCLI_API_PATH}" ]
then
  BSKYSHCLI_API_PATH="${BSKYSHCLI_LIB_PATH}/api"
fi
export BSKYSHCLI_API_PATH
if [ -z "${BSKYSHCLI_DEBUG_DIR}" ]
then
  BSKYSHCLI_DEBUG_DIR="${BSKYSHCLI_DEFAULT_DEBUG_DIR}"
fi
export BSKYSHCLI_DEBUG_DIR

UTILITY_PATH="${BSKYSHCLI_LIB_PATH}/util.sh"
if [ -r "${UTILITY_PATH}" ]
then
  # SC1090
  # shellcheck source=SCRIPTDIR/../lib/util.sh
  . "${UTILITY_PATH}"
else
  echo "tools internal configured file util.sh is not readable: ${UTILITY_PATH}"
  exit 1
fi
BSKY_CORE_PATH="${BSKYSHCLI_LIB_PATH}/bsky_core.sh"
if [ -r "${BSKY_CORE_PATH}" ]
then
  # SC1090
  # shellcheck source=SCRIPTDIR/../lib/bsky_core.sh
  . "${BSKY_CORE_PATH}"
else
  echo "tools internal configured file bsky_core.sh is not readable: ${BSKY_CORE_PATH}"
  exit 1
fi

# functions

output_help_general()
{
  debug 'output_help_general' 'START'

  cat << 'EOS'
bsky - A Bluesky CLI (Command Line Interface) implementation in shell script
usage: bsky [options] <command> [parameters]

global options:
  -P <profile>, --profile=<profile>
      specify session profile name. sessions coexist independently for each profile.

  --session-refresh
      forces a session refresh on command exectuion.

  --version
      show bsky CLI version. other options/command/parameters are ignored.

commands:
  login        login to Bluesky for create session.
  logout       logout from Bluesky for clear session.
  timeline     show timeline (now incomplete).
  feed         show custom feed (feed generator).
  author-feed  show author feed.
  post         post text.
  posts        multiple text posts.
  reply        reply to existing post.
  repost       reopst of existing post.
  quote        post by quoting an existing post.
  like         like on existing post.
  thread       show thread of specified post.
  profile      show profile.
  info         show session/meta informations.
  size         show number of characters in text.
  help         show this help.
  version      show bsky CLI version.

To see command help:
  bsky <command> help
EOS

  debug 'output_help_general' 'END'
}

output_help_login()
{
  debug 'output_help_login' 'START'

  cat << 'EOS'
bsky login command help'

usage: bsky login --handle <handle> --password <password>

parameters:
  --handle <handle>
    Specify Bluesky handle. Default domain (.bsky.social) can be omitted.

  --password <password>
    Specify the password corresponding to the handle.

note:
  A local file containing login session information is generated.
  Login session information is deleted using the logout command.
EOS

  debug 'output_help_login' 'END'
}

output_help_logout()
{
  debug 'output_help_logout' 'START'

  cat << 'EOS'
bsky logout command help

usage: bsky logout

parameters:
  none

note:
  Delete session and local files containing login session information.
EOS

  debug 'output_help_logout' 'END'
}

output_help_timeline()
{
  debug 'output_help_timeline' 'START'

  cat << 'EOS'
bsky timeline help

usage: bsky timeline [--limit <number>] [--next] [--output-id] [--output-via] [--output-json]

parameters:
  --limit <number>
    Specify limit number (default 50) of output feeds (from 1 to 100).

  --next
    Output next feeds from previous timeline command.

  --output-id
    Output identifier of AT protocol (uri, cid)

  --output-via
    Output via field (unofficial field indicating the posting client name)  

  --output-json
    Output JSON format. Following parameters are ignored:
      --output-id
      --output-via

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_timeline' 'END'
}

output_help_feed()
{
  debug 'output_help_feed' 'START'

  cat << 'EOS'
bsky feed help

usage: bsky feed --actor <handle or did> --record-key <record key> [--limit <number>] [--next] [--output-id] [--output-via] [--output-json]
       or
       bsky feed --handle <handle> --record-key <record key> [--limit <number>] [--next] [--output-id] [--output-via] [--output-json]
       or
       bsky feed --did <did> --record-key <record key> [--limit <number>] [--next] [--output-id] [--output-via] [--output-json]
       or
       bsky feed [--url] <bsky.app feed URL> [--limit <number>] [--next] [--output-id] [--output-via] [--output-json]

parameters:
  --actor <handle or did>
    Specify Bluesky handle or DID for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --record-key <record key>
    Specify record key for part of custom feed (feed generator) 

  --handle <handle>
    Specify Bluesky handle for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --did <did>
    Specify DID of account for custom feed (feed generator) creator.

  --url <bsky.app feed URL>
    Specify URL of custom feed (feed generator) handled by bsky.app (https://bsky.app/profile/<handle or did>/feed/<record key>).

  --limit <number>
    Specify limit number (default 50) of output feeds (from 1 to 100).

  --next
    Output next feeds from previous feed command.

  --output-id
    Output identifier of AT protocol (uri, cid)

  --output-via
    Output via field (unofficial field indicating the posting client name)  

  --output-json
    Output JSON format. Following parameters are ignored:
      --output-id
      --output-via

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_feed' 'END'
}

output_help_author_feed()
{
  debug 'output_help_author_feed' 'START'

  cat << 'EOS'
bsky author-feed help

usage: bsky author-feed --actor <handle or did> [--limit <number>] [--next] [--filter <filter>] [--output-id] [--output-via] [--output-json]
       or
       bsky author-feed --handle <handle> [--limit <number>] [--next] [--filter <filter>] [--output-id] [--output-via] [--output-json]
       or
       bsky author-feed --did <did> [--limit <number>] [--next] [--filter <filter>] [--output-id] [--output-via] [--output-json]

parameters:
  --actor <handle or did>
    Specify Bluesky handle or DID for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --handle <handle>
    Specify Bluesky handle for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --did <did>
    Specify DID of account for custom feed (feed generator) creator.

  --limit <number>
    Specify limit number (default 50) of output feeds (from 1 to 100).

  --next
    Output next feeds from previous author-feed command.

  --filter <filter>
    Specify type of filter for output posts.
    filter:
      posts-with-replies (default)
      posts-no-replies
      posts-with-media
      posts-and-author-threads

  --output-id
    Output identifier of AT protocol (uri, cid)

  --output-via
    Output via field (unofficial field indicating the posting client name)  

  --output-json
    Output JSON format. Following parameters are ignored:
      --output-id
      --output-via

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_author_feed' 'END'
}

output_help_post()
{
  debug 'output_help_post' 'START'

  cat << 'EOS'
bsky post help

usage: bsky post [--text '<text>'] [--text-file '<path to text file>'] [--image<N> <path to image file> [--alt<N> '<alt text>']]... [--linkcard-index <link index>] [--langs '<language code>[,...]'] [--output-json]

parameters:
  --text '<text>'
    Specify text for post.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --text-file '<path to text file>'
    Specify the path of text file to post.
    Only a single file can be specified.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --image<N> <path to image file>
    Specify image file path.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --alt<N> '<alt text>'
    Specify alternate text for image.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --linkcard-index <link index>
    Specify which of the link URLs included in the text will generate (embed) a link card.
    <link index> specifies the appearance order number of multiple link URLs included in the text.
    If this option is omitted, the first appearing link URL will be targeted.
    If you specify 0 for the <link index>, no link card will be generated.

  --langs '<language code>[,...]'
    Specify the languages to include in the post.
    Separate multiple language codes with commas (e.g. --langs 'en,ja').

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
  --text and --text-file are exclusive.
  Text can be specified from standard input (pipe/redirect/interactive). If none of the --text option, --text-file option, and standard input (pipe/redirect) are specified, input will be interactive.
  image and link card are exclusive, prioritize image specification.
EOS

  debug 'output_help_post' 'END'
}

output_help_posts()
{
  debug 'output_help_posts' 'START'

  cat << 'EOS'
bsky post help

usage: bsky posts [--mode <posts mode>] [--text '<text>'] [--text-files '<file path>[:...]'] [--langs '<language code>[,...]'] [--separator-prefix '<delimiter string>'] [--output-json]

parameters:
  --mode <posts mode>
    Specify the relationship between multiple texts.
    posts mode:
      thread (default)
      sibling
      independence

  --text '<text>'
    Specify text for post.

  --text-files '<file path>[:...]'
    Specify the path of text files to post.
    Separate multiple path of text files with colons (e.g. --text-files '/path/to/a.txt:/path/to/b.txt').

  --langs '<language code>[,...]'
    Specify the languages to include in the posts.
    Separate multiple language codes with commas (e.g. --langs 'en,ja').

  --separator-prefix '<delimiter string>'
    Splits posts within a single specified text (--text option, a file specified by the --text-files option, or standard input) at lines starting with the specified <separator string>.

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
  Text can be specified from standard input (pipe/redirect/interactive). If none of the --text option, --text-files option, and standard input (pipe/redirect) are specified, input will be interactive.
  Standard input (pipe/redirect), --text option, and`--text-files option can be specified at the same time. The order of multiple submissions will be text specified in standard input -> text specified in --text -> files specified in --text-files.
EOS

  debug 'output_help_posts' 'END'
}

output_help_reply()
{
  debug 'output_help_reply' 'START'

  cat << 'EOS'
bsky reply help

usage: bsky reply --index <view index> [--text '<text>'] [--text-file '<path to text file>'] [--image<N> <path to image file> [--alt<N> '<alt text>']]... [--linkcard-index <link index>] [--langs '<language code>[,...]'] [--output-json]
       or
       bsky reply --uri <uri> --cid <cid> [--text '<text>'] [--text-file '<path to text file>'] [--image<N> <path to image file> [--alt<N> '<alt text>']]... [--linkcard-index <link index>] [--langs '<language code>[,...]'] [--output-json]

parameters:
  --index <index>
    Specify the index number pointing to the feed to be replied to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be replied to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --text '<text>'
    Specify text for post.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --text-file '<path to text file>'
    Specify the path of text file to post.
    Only a single file can be specified.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --image<N> <path to image file>
    Specify image file path.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --alt<N> '<alt text>'
    Specify alternate text for image.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --linkcard-index <link index>
    Specify which of the link URLs included in the text will generate (embed) a link card.
    <link index> specifies the appearance order number of multiple link URLs included in the text.
    If this option is omitted, the first appearing link URL will be targeted.
    If you specify 0 for the <link index>, no link card will be generated.

  --langs '<language code>[,...]'
    Specify the languages to include in the post.
    Separate multiple language codes with commas (e.g. --langs 'en,ja').

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
  --text and --text-file are exclusive.
  Text can be specified from standard input (pipe/redirect/interactive). If none of the --text option, --text-file option, and standard input (pipe/redirect) are specified, input will be interactive.
  image and link card are exclusive, prioritize image specification.
EOS

  debug 'output_help_reply' 'END'
}

output_help_repost()
{
  debug 'output_help_repost' 'START'

  cat << 'EOS'
bsky repost help

usage: bsky repost --index <view index> [--output-json]
       or
       bsky repost --uri <uri> --cid <cid> [--output-json]

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be reposted to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be reposted to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_repost' 'END'
}

output_help_quote()
{
  debug 'output_help_quote' 'START'

  cat << 'EOS'
bsky quote help

usage: bsky quote --index <view index> [--text '<text>'] [--text-file '<path to text file>'] [--image<N> <path to image file> [--alt<N> '<alt text>']]... [--linkcard-index <link index>] [--langs '<language code>[,...]'] [--output-json]
       or
       bsky quote --uri <uri> --cid <cid> [--text '<text>'] [--text-file '<path to text file>'] [--image<N> <path to image file> [--alt<N> '<alt text>']]... [--linkcard-index <link index>] [--langs '<language code>[,...]'] [--output-json]

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be quoted to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be quoted to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --text '<text>'
    Specify text for post.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --text-file '<path to text file>'
    Specify the path of text file to post.
    Only a single file can be specified.
    If you specifiy standard input (pipe/redirect), this option is ignored.

  --image<N> <path to image file>
    Specify image file path.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --alt<N> '<alt text>'
    Specify alternate text for image.
    <N> is number from 1 to 4. if <N> not specified, it is equal to specified 1.

  --linkcard-index <link index>
    Specify which of the link URLs included in the text will generate (embed) a link card.
    <link index> specifies the appearance order number of multiple link URLs included in the text.
    If this option is omitted, the first appearing link URL will be targeted.
    If you specify 0 for the <link index>, no link card will be generated.

  --langs '<language code>[,...]'
    Specify the languages to include in the post.
    Separate multiple language codes with commas (e.g. --langs 'en,ja').

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
  --text and --text-file are exclusive.
  Text can be specified from standard input (pipe/redirect/interactive). If none of the --text option, --text-file option, and standard input (pipe/redirect) are specified, input will be interactive.
  image and link card are exclusive, prioritize image specification.
EOS

  debug 'output_help_quote' 'END'
}

output_help_like()
{
  debug 'output_help_like' 'START'

  cat << 'EOS'
bsky like help

usage: bsky like --index <view index> [--output-json]
       or
       bsky like --uri <uri> --cid <cid> [--output-json]

parameters:
  --index <view index>
    Specify the index number pointing to the feed to be liked to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
  --cid <cid>
    Specify the AT URI and CID pointing to the feed to be liked to.
    The AT URI and CID will be output by specifying the "--output-id" option with te feed output command.

  --output-json
    Output JSON format.

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_like' 'END'
}

output_help_thread()
{
  debug 'output_help_thread' 'START'

  cat << 'EOS'
bsky thread help

usage: bsky thread --index <view index> [--depth <number>] [--parent-height <number>] [--output-id] [--output-via] [--output-json]
       or
       bsky thread --uri <uri> [--depth <number>] [--parent-height <number>] [--output-id] [--output-via] [--output-json]

parameters:
  --index <view index>
    Specify the index string pointing to the feed to be show thread to.
    The index string is output as "[ViewIndex:<index string>]" using the feed output command.

  --uri <uri>
    Specify the AT URI pointing to the feed to be show thread to.
    The AT URI will be output by specifying the "--output-id" option with te feed output command.

  --depth <number>
    Specify show levels (default 6) of reply depth (from 0 to 1000).

  --parent-height <number>
    Specify show levels (default 80) of parent post to include (from 0 to 1000).

  --output-id
    Output identifier of AT protocol (uri, cid).

  --output-via
    Output via field (unofficial field indicating the posting client name)  

  --output-json
    Output JSON format. Following parameters are ignored:
      --output-id
      --output-via

note:
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_thread' 'END'
}

output_help_profile()
{
  debug 'output_help_profile' 'START'

  cat << 'EOS'
bsky author-feed help

usage: bsky profile --actor <handle or did> [--output-id] [--output-json]
       or
       bsky profile --handle <handle> [--output-id] [--output-json]
       or
       bsky profile --did <did> [--output-id] [--output-json]
       or
       bsky profile [--output-id] [--output-json]

parameters:
  --actor <handle or did>
    Specify Bluesky handle or DID for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --handle <handle>
    Specify Bluesky handle for custom feed (feed generator) creator. Default handle domain (.bsky.social) can be omitted.

  --did <did>
    Specify DID of account for custom feed (feed generator) creator.

  --output-id
    Output identifier of AT protocol (uri, cid)

  --output-json
    Output JSON format. Following parameter is ignored:
      --output-id

note:
  if --actor, --handle, and --did are all omitted, the current session account will be targeted.
  you must have started a Bluesky session with the login command.
EOS

  debug 'output_help_profile' 'END'
}

output_help_pref()
{
  debug 'output_help_pref' 'START'

  cat << 'EOS'
bsky pref help

usage: bsky pref [--group <preference group>] [--item <preference item>] [--output-json]

parameters:
  --group <preference group>[,<preference group>...]
    Specify preference group.
    If parameter --item is omitted, all items under the group will be targeted.
    Unconfigured (unset) items are not displayed.
    preference group:
      adult-content
      content-label
      saved-feeds
      personal-details
      feed-view
      thread-view
      interests
      muted-words
      hidden-posts
  
  --item <preference item>[,<preference item>...]
    Specify preference item.
    If this parameter value is specified in the format '<group>.<item>', the --group parameter must not specified.
    If this parameter value is specified in the format '<item>', only one --group parameter can be specified.
    preference item:
      (items description is under construction)

  --output-json
    Output JSON format.

EOS
  debug 'output_help_pref' 'END'
}

output_help_info()
{
  debug 'output_help_info' 'START'

  cat << 'EOS'
bsky info help

usage: bsky info <subcommand>

subcommand:
  session
    show session informations.

  meta
    show meta informations.

To see command help:
  bsky info <subcommand> help
EOS

  debug 'output_help_info' 'END'
}

output_help_info_session()
{
  debug 'output_help_info_session' 'START'

  cat << 'EOS'
bsky info help

usage: bsky info session [parameters]

parameters:
  --all
    show all session informations.

  --which
    show session information stored file path.

  --status
    show session status (login or not login).

  --login
    show login timestamp.

  --refresh
    show session latest refresh timestamp.

  --handle
    show login handle.

  --did
    show login did.

  --index
    show current index for some commands.
    show with IDs if '--output-id' option specified.
  
  --cursor
    show current cursor for paginate.
  
  --output-id
    output IDs for some paramaters.

  --output-json
    Output JSON format. Other parameters are ignored.

note:
  show all session informations if parameters not specified.
EOS

  debug 'output_help_info_session' 'END'
}

output_help_info_meta()
{
  debug 'output_help_info_meta' 'START'

  cat << 'EOS'
bsky info help

usage: bsky info meta [parameters]

parameters:
  --all
    show all meta informations.

  --path
    show path informations.

  --config
    show configurations.

  --profile
    show session active profiles.

  --output-json
    Output JSON format. Other parameters are ignored:

note:
  show all session informations if parameters not specified.
EOS

  debug 'output_help_info_meta' 'END'
}

output_help_size()
{
  debug 'output_help_size' 'START'

  cat << 'EOS'
bsky size help

usage: bsky size [--text '<text>'] [--text-files '<file path>[:...]'] [--separator-prefix '<delimiter string>'] [--count-only] [--output-json]

parameters:
  --text '<text>'
    Specify text for show number of characters.

  --text-files '<file path>[:...]'
    Specify the path of text files to show number of characters.
    Separate multiple path of text files with colons (e.g. --text-files '/path/to/a.txt:/path/to/b.txt').

  --separator-prefix '<delimiter string>'
    Splits posts within a single specified text (--text option, a file specified by the --text-files option, or standard input) at lines starting with the specified <separator string>.

  --count-only
    Output only number of characters.

  --output-json
    Output JSON format. Following parameter is ignored:
      --count-only

note:
  Text can be specified from standard input (pipe/redirect/interactive). If none of the --text option, --text-files option, and standard input (pipe/redirect) are specified, input will be interactive.
  Standard input (pipe/redirect), --text option, and --text-files option can be specified at the same time. The order of multiple submissions will be text specified in standard input -> text specified in --text -> files specified in --text-files.
  Newlines at the end of text are ignored.
  URL shortening is not supported at this time.
EOS

  debug 'output_help_size' 'END'
}

output_help_version()
{
  debug 'output_help_version' 'START'


  cat << 'EOS'
bsky version help

usage: bsky version
EOS

  debug 'output_help_version' 'END'
}

parse_parameters_login()
{
  debug 'parse_parameters_login' 'START'

  # parameter may include a password
  debug_mode_suppress
  parse_parameters '--handle:1 --password:1' "$@"
  debug_mode_restore

  # dynamic assignment in parse_parameters
  # shellcheck disable=SC2154
  PARSED_PARAM_HANDLE="${PARSED_PARAM_KEYVALUE_handle}"
  # shellcheck disable=SC2154
  PARSED_PARAM_PASSWORD="${PARSED_PARAM_KEYVALUE_password}"

  debug 'parse_parameters_login' 'END'
}

parse_global_option()
{
  debug 'parse_global_option' 'START'

  # if the subsequent command is 'login', parameter may include a password
  debug_mode_suppress
  parse_parameters '-P:1 --profile:1 --session-refresh:0 --version:0' "$@"
  options=$?
  debug_mode_restore
  
  if [ -n "${PARSED_PARAM_KEYVALUE_P}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_PROFILE="${PARSED_PARAM_KEYVALUE_P}"
  elif [ -n "${PARSED_PARAM_KEYVALUE_profile}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_PROFILE="${PARSED_PARAM_KEYVALUE_profile}"
  fi

  if [ -n "${BSKYSHCLI_GLOBAL_OPTION_PROFILE}" ]
  then
    # to pass the value to the API script executing the command at api_core()
    export BSKYSHCLI_GLOBAL_OPTION_PROFILE
    verify_profile_name "${BSKYSHCLI_GLOBAL_OPTION_PROFILE}"
  fi

  if [ -n "${PARSED_PARAM_KEYONLY_session_refresh}" ]
  then
    BSKYSHCLI_GLOBAL_OPTION_SESSION_REFRESH='defined'
  fi

  if [ -n "${PARSED_PARAM_KEYONLY_version}" ]
  then
    command_version
    exit 0
  fi

  debug 'parse_global_option' 'END'

  return "${options}"
}

interact_string()
{
  param_description="$1"
  param_prompt="$2"
  param_is_secret="$3"

  debug 'interact_string' 'START'
  debug 'interact_string' "param_description:${param_description}"
  debug 'interact_string' "param_prompt:${param_prompt}"
  debug 'interact_string' "param_is_secret:${param_is_secret}"

  if [ -n "${param_description}" ]
  then
    _pn "${param_description}"
  fi
  if [ -n "${param_prompt}" ]
  then
    prompt="${param_prompt}: "
  else
    prompt='> '
  fi
  _p "${prompt}"
  if [ "${param_is_secret}" -eq 0 ]
  then
    stty -echo
  fi
  # -r option recommendation disable for compatible with Solaris sh
  # shellcheck disable=SC2162
  read RESULT_INTERACT_STRING
  if [ "${param_is_secret}" -eq 0 ]
  then
    stty echo
    _pn ''
  fi

  debug 'interact_string' 'END'
}

interact_login_2FA()
{
  param_handle="$1"
  param_password="$2"

  debug 'interact_login_2FA' 'START'

  interact_string 'input sign in code has been sent to your email address' 'code' 1
  auth_factor_token="${RESULT_INTERACT_STRING}"
  core_create_session "${param_handle}" "${param_password}" "${auth_factor_token}"
  status=$?
  case $status in
    0)
      read_session_file
      _pn "login session of ${SESSION_HANDLE}"
      ;;
  esac

  debug 'interact_login_2FA' 'END'

  return $status
}

command_login()
{
  debug 'command_login' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_login
  else
    parse_parameters_login "$@"
    if [ -n "${PARSED_PARAM_HANDLE}" ]
    then
      handle="${PARSED_PARAM_HANDLE}"
    else
      interact_string 'input Bluesky handle' 'handle' 1
      handle="${RESULT_INTERACT_STRING}"
    fi

    if [ -n "${PARSED_PARAM_PASSWORD}" ]
    then
      password="${PARSED_PARAM_PASSWORD}"
    else
      interact_string "input password of ${handle} (no echo back)" 'password' 0
      password="${RESULT_INTERACT_STRING}"
    fi

    core_create_session "${handle}" "${password}"
    status=$?
    case $status in
      0)
        read_session_file
        _pn "login session of ${SESSION_HANDLE}"
        ;;
      3)
        # 2FA token required
        status=1
        until [ $status -eq 0 ]
        do
          interact_login_2FA "${handle}" "${password}"
          status=$?
        done
        ;;
    esac
  fi

  debug 'command_login' 'END'

  return $status
}

command_logout()
{
  debug 'command_logout' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_logout
  else
    read_session_file
    if [ -n "${SESSION_HANDLE}" ]
    then
      core_delete_session
      _pn "logout session of ${SESSION_HANDLE}"
    else
      error 'session not found'
    fi
  fi

  debug 'command_logout' 'END'

  return 0
}

command_timeline()
{
  debug 'command_timeline' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_timeline
  else
    parse_parameters '--limit:1 --next:0 --output-id:0 --output-via:0 --output-json:0' "$@"
    if [ -n "${PARSED_PARAM_KEYVALUE_limit}" ]
    then
      verify_numeric_range 'limit' "${PARSED_PARAM_KEYVALUE_limit}" 1 100
      limit=$?
    else
      limit=''
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_get_timeline '' "${limit}" "${PARSED_PARAM_KEYONLY_next}" "${PARSED_PARAM_KEYONLY_output_id}" "${PARSED_PARAM_KEYONLY_output_via}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_timeline' 'END'

  return 0
}

command_feed()
{
  debug 'command_feed' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_feed
  else
    if core_is_feed_generator "$1"
    then
      naked_feed_generator="$1"
      shift
    fi

    parse_parameters '--actor:1 --record-key:1 --handle:1 --did:1 --url:1 --limit:1 --next:0 --output-id:0 --output-via:0 --output-json:0' "$@"

    if [ -n "${naked_feed_generator}" ]
    then
      if [ -n "${PARSED_PARAM_KEYVALUE_url}" ]
      then
        error 'url parameter is specify only one'
      fi
      url="${naked_feed_generator}"
    else
      url="${PARSED_PARAM_KEYVALUE_url}"
    fi

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    verify_exclusive 0 '--actor --handle --did --url', "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}" "${url}"

    did=`core_resolve_actor "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}"`
    status=$?
    if [ $status -ne 0 ]
    then
      error 'feed command error occured'
    fi

    if [ -n "${did}" ] && [ -z "${PARSED_PARAM_KEYVALUE_record_key}" ]
    then
      error 'parameter --actor/--handle/--did must be specified --record-key'
    fi

    if [ -n "${PARSED_PARAM_KEYVALUE_limit}" ]
    then
      verify_numeric_range 'limit' "${PARSED_PARAM_KEYVALUE_limit}" 1 100
      limit=$?
    else
      limit=''
    fi

    core_get_feed "${did}" "${PARSED_PARAM_KEYVALUE_record_key}" "${url}" "${limit}" "${PARSED_PARAM_KEYONLY_next}" "${PARSED_PARAM_KEYONLY_output_id}" "${PARSED_PARAM_KEYONLY_output_via}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_feed' 'END'
}

command_author_feed()
{
  debug 'command_author_feed' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_author_feed
  else
    parse_parameters '--actor:1 --handle:1 --did:1 --limit:1 --next:0 --filter:1 --output-id:0 --output-via:0 --output-json:0' "$@"

    verify_exclusive 0 '--actor --handle --did', "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}"

    did=`core_resolve_actor "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}"`
    status=$?
    if [ $status -ne 0 ]
    then
      error 'author-feed command error occured'
    fi

    if [ -n "${PARSED_PARAM_KEYVALUE_limit}" ]
    then
      verify_numeric_range 'limit' "${PARSED_PARAM_KEYVALUE_limit}" 1 100
      limit=$?
    else
      limit=''
    fi

    if [ -n "${PARSED_PARAM_KEYVALUE_filter}" ]
    then
      case $PARSED_PARAM_KEYVALUE_filter in
        posts-with-replies|posts-no-replies|posts-with-media|posts-and-author-threads)
          filter=`_p "${PARSED_PARAM_KEYVALUE_filter}" | sed 's/-/_/g'`
          ;;
        *)
          error "--filter value ${PARSED_PARAM_KEYVALUE_filter} is not found. see 'bsky author-feed help'"
          ;;
      esac
    else
      filter=''
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_get_author_feed "${did}" "${limit}" "${PARSED_PARAM_KEYONLY_next}" "${filter}" "${PARSED_PARAM_KEYONLY_output_id}" "${PARSED_PARAM_KEYONLY_output_via}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_author_feed' 'END'

  return 0
}

command_post()
{
  debug 'command_post' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_post
  else
    parse_parameters '--text:1 --text-file:1 --image:1 --alt:1 --image1:1 --alt1:1 --image2:1 --alt2:1 --image3:1 --alt3:1 --image4:1 --alt4:1 --linkcard-index:1 --langs:1 --output-json:0' "$@"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    verify_exclusive 1 '--text --text-file' "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"
    # shellcheck disable=SC2154
    verify_exclusive 1 '--image --image1' "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_image1}"
    # shellcheck disable=SC2154
    verify_exclusive 1 '--alt --alt1' "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_alt1}"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    if post_text=`resolve_post_text "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"`
    then
      :
    else
      error 'Processing has been canceled'
    fi
    if [ -z "${post_text}" ]
    then
      error "text must be specify (--text or --text-file or standard input)"
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    linkcard_index="${PARSED_PARAM_KEYVALUE_linkcard_index}"
    if [ -n "${linkcard_index}" ]
    then
      _isnumeric "${linkcard_index}"
      is_numeric=$?
      if [ $is_numeric -ne 0 ]
      then
        error "--linkcard-index parameter must be numeric value: ${depth}"
      fi
    else
      linkcard_index=1
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_post "${post_text}" "${linkcard_index}" "${PARSED_PARAM_KEYVALUE_langs}" "${PARSED_PARAM_KEYONLY_output_json}" "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_image1}" "${PARSED_PARAM_KEYVALUE_alt1}" "${PARSED_PARAM_KEYVALUE_image2}" "${PARSED_PARAM_KEYVALUE_alt2}" "${PARSED_PARAM_KEYVALUE_image3}" "${PARSED_PARAM_KEYVALUE_alt3}" "${PARSED_PARAM_KEYVALUE_image4}" "${PARSED_PARAM_KEYVALUE_alt4}"
  fi

  debug 'command_post' 'END'
}

command_posts()
{
  debug 'command_posts' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_posts
  else
    parse_parameters '--mode:1 --text:1 --text-files:1 --langs:1 --output-json:0 --separator-prefix:1' "$@"

    separator_prefix="${BSKYSHCLI_POSTS_SEPARATOR_PREFIX}"
    if [ -n "${PARSED_PARAM_KEYVALUE_separator_prefix}" ]
    then
      separator_prefix="${PARSED_PARAM_KEYVALUE_separator_prefix}"
    fi

    # standard input
    stdin_text=`standard_input_lines "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_files}"`

    if [ -z "${stdin_text}" ] && [ -z "${PARSED_PARAM_KEYVALUE_text}" ] && [ -z "${PARSED_PARAM_KEYVALUE_text_files}" ]
    then
      error "text must be specify (--text or --text-files or standard input)"
    fi

    if [ -n "${PARSED_PARAM_KEYVALUE_mode}" ]
    then
      # dynamic assignment in parse_parameters
      # shellcheck disable=SC2154
      case $PARSED_PARAM_KEYVALUE_mode in
        thread|sibling|independence)
          ;;
        *)
          error "--mode value ${PARSED_PARAM_KEYVALUE_mode} is not found. see 'bsky posts help'"
          ;;
      esac
    fi

    # unescaped
    specified_text=`echo "${PARSED_PARAM_KEYVALUE_text}" | sed 's/\\\\"/"/g'`
    # posts count check
    posts_count=0
    # posts count in standard input
    core_posts_count_lines "${stdin_text}" "${separator_prefix}"
    stdin_count=$?
    posts_count=`expr "${posts_count}" + "${stdin_count}"`
    # posts count in parameter specified
    core_posts_count_lines "${specified_text}" "${separator_prefix}"
    specified_text_count=$?
    posts_count=`expr "${posts_count}" + "${specified_text_count}"`
    # posts count in text files
    core_posts_files_count_lines "${PARSED_PARAM_KEYVALUE_text_files}" "${separator_prefix}"
    text_files_count=$?
    posts_count=`expr "${posts_count}" + "${text_files_count}"`
    debug 'command_posts' "posts count: ${posts_count}"
    if [ "${posts_count}" -gt 10 ]
    then
      error "The total number of posts by --text and --text-files options exceeds the limit of 10. Detect count:${posts_count}"
    fi

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_posts "${PARSED_PARAM_KEYVALUE_mode}" "${stdin_text}" "${specified_text}" "${PARSED_PARAM_KEYVALUE_text_files}" "${PARSED_PARAM_KEYVALUE_langs}" "${separator_prefix}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_posts' 'END'
}

command_reply()
{
  debug 'command_reply' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_reply
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --text:1 --text-file:1 --image:1 --alt:1 --image1:1 --alt1:1 --image2:1 --alt2:1 --image3:1 --alt3:1 --image4:1 --alt4:1 --linkcard-index:1 --langs:1 --output-json:0' "$@"

    verify_exclusive 1 '--text --text-file' "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"
    verify_exclusive 1 '--image --image1' "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_image1}"
    verify_exclusive 1 '--alt --alt1' "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_alt1}"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    view_index="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    uri="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    cid="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${view_index}" ]
    then
      if [ -n "${uri}" ] || [ -n "${cid}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${view_index}"
      uri="${FEED_VIEW_INDEX_ELEMENT_URI}"
      cid="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${uri}" ] || [ -z "${cid}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    if post_text=`resolve_post_text "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"`
    then
      :
    else
      error 'Processing has been canceled'
    fi
    if [ -z "${post_text}" ]
    then
      error "text must be specify (--text or --text-file or standard input)"
    fi
    linkcard_index="${PARSED_PARAM_KEYVALUE_linkcard_index}"
    if [ -n "${linkcard_index}" ]
    then
      _isnumeric "${linkcard_index}"
      is_numeric=$?
      if [ $is_numeric -ne 0 ]
      then
        error "--linkcard-index parameter must be numeric value: ${depth}"
      fi
    else
      linkcard_index=1
    fi
    core_reply "${uri}" "${cid}" "${post_text}" "${linkcard_index}" "${PARSED_PARAM_KEYVALUE_langs}" "${PARSED_PARAM_KEYONLY_output_json}" "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_image1}" "${PARSED_PARAM_KEYVALUE_alt1}" "${PARSED_PARAM_KEYVALUE_image2}" "${PARSED_PARAM_KEYVALUE_alt2}" "${PARSED_PARAM_KEYVALUE_image3}" "${PARSED_PARAM_KEYVALUE_alt3}" "${PARSED_PARAM_KEYVALUE_image4}" "${PARSED_PARAM_KEYVALUE_alt4}"
  fi

  debug 'command_reply' 'END'
}

command_repost()
{
  debug 'command_repost' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_repost
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --output-json:0' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    view_index="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    uri="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    cid="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${view_index}" ]
    then
      if [ -n "${uri}" ] || [ -n "${cid}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${view_index}"
      uri="${FEED_VIEW_INDEX_ELEMENT_URI}"
      cid="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${uri}" ] || [ -z "${cid}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    core_repost "${uri}" "${cid}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_repost' 'END'
}

command_quote()
{
  debug 'command_quote' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_quote
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --text:1 --text-file:1 --image:1 --alt:1 --image1:1 --alt1:1 --image2:1 --alt2:1 --image3:1 --alt3:1 --image4:1 --alt4:1 --linkcard-index:1 --langs:1 --output-json:0' "$@"

    verify_exclusive 1 '--text --text-file' "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"
    verify_exclusive 1 '--image --image1' "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_image1}"
    verify_exclusive 1 '--alt --alt1' "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_alt1}"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    view_index="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    uri="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    cid="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${view_index}" ]
    then
      if [ -n "${uri}" ] || [ -n "${cid}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${view_index}"
      uri="${FEED_VIEW_INDEX_ELEMENT_URI}"
      cid="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${uri}" ] || [ -z "${cid}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    if post_text=`resolve_post_text "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_file}"`
    then
      :
    else
      error 'Processing has been canceled'
    fi
    if [ -z "${post_text}" ]
    then
      error "text must be specify (--text or --text-file standard input)"
    fi
    linkcard_index="${PARSED_PARAM_KEYVALUE_linkcard_index}"
    if [ -n "${linkcard_index}" ]
    then
      _isnumeric "${linkcard_index}"
      is_numeric=$?
      if [ $is_numeric -ne 0 ]
      then
        error "--linkcard-index parameter must be numeric value: ${depth}"
      fi
    else
      linkcard_index=1
    fi
    core_quote "${uri}" "${cid}" "${post_text}" "${linkcard_index}" "${PARSED_PARAM_KEYVALUE_langs}" "${PARSED_PARAM_KEYONLY_output_json}" "${PARSED_PARAM_KEYVALUE_image}" "${PARSED_PARAM_KEYVALUE_alt}" "${PARSED_PARAM_KEYVALUE_image1}" "${PARSED_PARAM_KEYVALUE_alt1}" "${PARSED_PARAM_KEYVALUE_image2}" "${PARSED_PARAM_KEYVALUE_alt2}" "${PARSED_PARAM_KEYVALUE_image3}" "${PARSED_PARAM_KEYVALUE_alt3}" "${PARSED_PARAM_KEYVALUE_image4}" "${PARSED_PARAM_KEYVALUE_alt4}"
  fi

  debug 'command_quote' 'END'
}

command_like()
{
  debug 'command_like' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_like
  else
    parse_parameters '--index:1 --uri:1 --cid:1 --output-json:0' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    view_index="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    uri="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    cid="${PARSED_PARAM_KEYVALUE_cid}"
    if [ -n "${view_index}" ]
    then
      if [ -n "${uri}" ] || [ -n "${cid}" ]
      then
        error "--index and --uri/--cid are exclusive"
      fi
      core_get_feed_view_index "${view_index}"
      uri="${FEED_VIEW_INDEX_ELEMENT_URI}"
      cid="${FEED_VIEW_INDEX_ELEMENT_CID}"
    else
      if [ -z "${uri}" ] || [ -z "${cid}" ]
      then
        error "parameter must be specify --index or --uri/--cid"
      fi
    fi
    core_like "${uri}" "${cid}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_like' 'END'
}

command_thread()
{
  debug 'command_thread' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_thread
  else
    parse_parameters '--index:1 --uri:1 --depth:1 --parent-height:1 --output-id:0 --output-via:0 --output-json:0' "$@"
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    view_index="${PARSED_PARAM_KEYVALUE_index}"
    # shellcheck disable=SC2154
    uri="${PARSED_PARAM_KEYVALUE_uri}"
    # shellcheck disable=SC2154
    depth="${PARSED_PARAM_KEYVALUE_depth}"
    # shellcheck disable=SC2154
    parent_height="${PARSED_PARAM_KEYVALUE_parent_height}"
    if [ -n "${view_index}" ]
    then
      if [ -n "${uri}" ]
      then
        error "--index and --uri are exclusive"
      fi
      core_get_feed_view_index "${view_index}"
      uri="${FEED_VIEW_INDEX_ELEMENT_URI}"
    else
      if [ -z "${uri}" ]
      then
        error "parameter must be specify --index or --uri"
      fi
    fi
    if [ -n "${depth}" ]
    then
      _isnumeric "${depth}"
      is_numeric=$?
      if [ $is_numeric -ne 0 ]
      then
        error "--depth parameter must be numeric value: ${depth}"
      fi
    fi
    if [ -n "${parent_height}" ]
    then
      _isnumeric "${parent_height}"
      is_numeric=$?
      if [ $is_numeric -ne 0 ]
      then
        error "--parent-height parameter must be numeric value: ${parent_height}"
      fi
    fi
    core_thread "${uri}" "${depth}" "${parent_height}" "${PARSED_PARAM_KEYONLY_output_id}" "${PARSED_PARAM_KEYONLY_output_via}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_thread' 'END'
}

command_profile()
{
  debug 'command_profile' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_profile
  else
    parse_parameters '--actor:1 --handle:1 --did:1 --output-id:0 --dump:0 --output-json:0' "$@"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    if verify_exclusive 1 '--actor --handle --did', "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}"
    then
      :
    else
      read_session_file
      PARSED_PARAM_KEYVALUE_did="${SESSION_DID}"
    fi

    did=`core_resolve_actor "${PARSED_PARAM_KEYVALUE_actor}" "${PARSED_PARAM_KEYVALUE_handle}" "${PARSED_PARAM_KEYVALUE_did}"`
    status=$?
    if [ $status -ne 0 ]
    then
      error 'profile command error occured'
    fi

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_get_profile "${did}" "${PARSED_PARAM_KEYONLY_output_id}" "${PARSED_PARAM_KEYONLY_dump}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_profile' 'END'
}

command_pref()
{
  debug 'command_pref' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_pref
  else
    parse_parameters '--group:1 --item:1 --dump:0 --output-json:0' "$@"

    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_get_pref "${PARSED_PARAM_KEYVALUE_group}" "${PARSED_PARAM_KEYVALUE_item}" "${PARSED_PARAM_KEYONLY_dump}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_pref' 'END'
}

command_info_session()
{
  debug 'command_info_session' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_info_session
  else
    parse_parameters '--all:0 --which:0 --status:0 --login:0 --refresh:0 --handle:0 --did:0 --index:0 --cursor:0 --output-id:0 --output-json:0' "$@"
    count_options=$?
    if [ $count_options -eq 0 ]
    then
      PARSED_PARAM_KEYONLY_all='(defined)'
    elif [ $count_options -eq 1 ] && [ -n "${PARSED_PARAM_KEYONLY_output_id}" ]
    then
      PARSED_PARAM_KEYONLY_all='(defined)'
    fi
    output_json="${PARSED_PARAM_KEYONLY_output_json}"

    read_session_file
    if [ -n "${output_json}" ]
    then
      _p '{'
        core_info_session_which "${output_json}"
        _p ','
        core_info_session_status "${output_json}"
        _p ','
        core_info_session_login "${output_json}"
        _p ','
        core_info_session_refresh "${output_json}"
        _p ','
        core_info_session_handle "${output_json}"
        _p ','
        core_info_session_did "${output_json}"
        _p ','
        core_info_session_index "${PARSED_PARAM_KEYONLY_output_id}" "${output_json}"
        _p ','
        core_info_session_cursor "${output_json}"
      _p '}'
    else
      if [ -n "${PARSED_PARAM_KEYONLY_which}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_which
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_status}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_status
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_login}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_login
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_refresh}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_refresh
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_handle}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_handle
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_did}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_did
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_index}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_index "${PARSED_PARAM_KEYONLY_output_id}"
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_cursor}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_session_cursor
      fi
    fi
  fi

  debug 'command_info_session' 'END'
}

command_info_meta()
{
  debug 'command_info_meta' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_info_meta
  else
    parse_parameters '--all:0 --path:0 --config:0 --profile:0 --output-json:0' "$@"
    count_options=$?
    if [ $count_options -eq 0 ]
    then
      PARSED_PARAM_KEYONLY_all='(defined)'
    fi
    
    read_session_file
    output_json="${PARSED_PARAM_KEYONLY_output_json}"
    if [ -n "${output_json}" ]
    then
      _p '{'
        core_info_meta_path "${output_json}"
        _p ','
        core_info_meta_config "${output_json}"
        _p ','
        core_info_meta_profile "${output_json}"
      _p '}'
    else
      if [ -n "${PARSED_PARAM_KEYONLY_path}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_meta_path
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_config}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_meta_config
      fi
      if [ -n "${PARSED_PARAM_KEYONLY_profile}" ] || [ -n "${PARSED_PARAM_KEYONLY_all}" ]
      then
        core_info_meta_profile
      fi
    fi
  fi

  debug 'command_info_meta' 'END'
}

command_info()
{
  debug 'command_info' 'START'

  case $1 in
    session)
      shift
      command_info_session "$@"
      ;;
    meta)
      shift
      command_info_meta "$@"
      ;;
    help)
      output_help_info
      ;;
    *)
      output_help_info
      ;;
  esac

  debug 'command_info' 'END'
}

command_size()
{
  debug 'command_size' 'START'

  if [ "$1" = 'help' ]
  then
    output_help_size
  else
    parse_parameters '--text:1 --text-files:1 --count-only:0 --output-json:0 --separator-prefix:1' "$@"

    separator_prefix="${BSKYSHCLI_POSTS_SEPARATOR_PREFIX}"
    if [ -n "${PARSED_PARAM_KEYVALUE_separator_prefix}" ]
    then
      separator_prefix="${PARSED_PARAM_KEYVALUE_separator_prefix}"
    fi

    # standard input
    stdin_text=`standard_input_lines "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_files}"`

    if [ -z "${stdin_text}" ] && [ -z "${PARSED_PARAM_KEYVALUE_text}" ] && [ -z "${PARSED_PARAM_KEYVALUE_text_files}" ]
    then
      error 'parameter specify required --text or --text-files or standard input'
    fi
    # dynamic assignment in parse_parameters
    # shellcheck disable=SC2154
    core_size "${stdin_text}" "${PARSED_PARAM_KEYVALUE_text}" "${PARSED_PARAM_KEYVALUE_text_files}" "${separator_prefix}" "${PARSED_PARAM_KEYONLY_count_only}" "${PARSED_PARAM_KEYONLY_output_json}"
  fi

  debug 'command_size' 'END'
}

command_version()
{
  debug 'command_version' 'START'

  _pn "bsky (bsky-sh-cli) ${BSKYSHCLI_CLI_VERSION}"

  debug 'command_version' 'END'
}

# entry point

set_timezone

# equal to if ! mkdir...; does not written for compatible with Solaris sh
mkdir -p "${BSKYSHCLI_TOOLS_WORK_DIR}"
result=$?
if [ $result -ne 0 ]
then
  error "cannot make work directory '${BSKYSHCLI_TOOLS_WORK_DIR}'"
fi
if [ "${BSKYSHCLI_DEBUG}" = 'ON' ]
then
  mkdir -p "${BSKYSHCLI_DEBUG_DIR}"
  result=$?
  if [ $result -ne 0 ]
  then
    error "cannot make debug directory '${BSKYSHCLI_DEBUG_DIR}'"
  fi
fi

debug 'bsky' 'START'
# CAUTION: command parameters may contain sensitive information such as passwords 
#debug 'bsky' "command parameters: $*"

check_required_command 'curl' 'jq'
check_result=$?
if [ $check_result -ne 0 ]
then
  command_version
  exit 1
fi

parse_global_option "$@"
options=$?
for _ in `seq 1 ${options}`
do
  shift
done

case $1 in
  login)
    shift
    command_login "$@"
    ;;
  logout)
    shift
    command_logout "$@"
    ;;
  timeline)
    shift
    command_timeline "$@"
    ;;
  feed)
    shift
    command_feed "$@"
    ;;
  author-feed)
    shift
    command_author_feed "$@"
    ;;
  post)
    shift
    command_post "$@"
    ;;
  posts)
    shift
    command_posts "$@"
    ;;
  reply)
    shift
    command_reply "$@"
    ;;
  repost)
    shift
    command_repost "$@"
    ;;
  quote)
    shift
    command_quote "$@"
    ;;
  like)
    shift
    command_like "$@"
    ;;
  thread)
    shift
    command_thread "$@"
    ;;
  profile)
    shift
    command_profile "$@"
    ;;
  pref)  # non-public command
    shift
    command_pref "$@"
    ;;
  info)
    shift
    command_info "$@"
    ;;
  size)
    shift
    command_size "$@"
    ;;
  help)
    output_help_general
    ;;
  version)
    shift
    command_version "$@"
    ;;
  *)
    output_help_general
    ;;
esac

debug 'bsky' 'END'

exit 0

